unit UStockv2;

interface

uses System.SysUtils;

type TData= class
  private
    Date: string;
    Open, High, Low, Close,  AdjClose: real;
    Volume: integer;
  public
    constructor Create(Line:string; count: integer);
    function GetDate(value: integer): string;
    function GetOpen(value: integer): real;
    function GetHigh(value: integer): real;
    function GetLow(value: integer): real;
    function GetClose(value: integer): real;
    function GetAdjClose(value:integer): real;
    function GetVolume(value:integer): integer;
end;
  TShare= array of TData;

  TStock = class
  private
    FData: TShare;
    FSize: integer;
  public
    constructor Create(fileName: string);


  end;
implementation

{ TStock }

constructor TStock.Create(fileName: string);
  var
  i,s,n, count: integer;
  line, chunk: string;
  first: boolean;
  myFile: textfile;
begin
SetLength(FData, 251);

if fileexists(fileName)=True then
  begin
    assign(myFile, fileName);
    reset(myFile);
    i:=0;
    chunk:= '';
    //first:= True;
    while not eof(myFile) do
      begin
        readln(myFile, line);
        if length(line)>0 then
          begin
            n:=0;
            //if first=True then

            count:=length(line);
            writeln(line);
            FData[i]:= TData.Create(Line, count);
            inc(i);
          end;

      end;
    closefile(myFile);
  end;

end;

{ TData }


constructor TData.Create(Line:string; count: integer);
var
  s,i: integer;
  chunk: string;

begin
  i:=0;

  for s := 1 to count do
    begin
      if (line[s]=',') or (s=count) then
        begin
          case i of
            0:
              Date:= chunk;
            1:
              Open:= strtofloat(chunk);
            2:
              High:= strtofloat(chunk);
            3:
              Low:= strtofloat(chunk);
            4:
              Close:= strtofloat(chunk);
            5:
              AdjClose:= strtofloat(chunk);
            6:
              Volume:= strtoint(chunk);
          end;
          inc(i);
        end
      else
        begin
          chunk:= chunk+line[s];
        end;
    end;
end;

function TData.GetAdjClose(value: integer): real;
begin

end;

function TData.GetClose(value: integer): real;
begin

end;

function TData.GetDate(value: integer): string;
begin

end;

function TData.GetHigh(value: integer): real;
begin

end;

function TData.GetLow(value: integer): real;
begin

end;

function TData.GetOpen(value: integer): real;
begin

end;

function TData.GetVolume(value: integer): integer;
begin

end;

end.
